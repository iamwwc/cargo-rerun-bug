use std::{env, path::PathBuf, process::Command};
use lazy_static::lazy_static;
macro_rules! p {
    ($($tokens: tt)*) => {
        println!("cargo:warning={}", format!($($tokens)*))
    }
}
lazy_static!{
    #[derive(Debug)]
    static ref os_folder: String = {
        let manifest_dir: PathBuf = PathBuf::from(env::var("CARGO_MANIFEST_DIR").unwrap());
        manifest_dir.join("src/openssl/").to_str().unwrap().to_string()
    };
}
fn generate_openssl_bindings() {
    println!("cargo:rustc-link-lib=ssl");
    println!("cargo:rustc-link-lib=crypto");
    println!("cargo:rustc-link-search={}", &*os_folder);
    println!("cargo:include={}/include", &*os_folder);
    let bindings = bindgen::Builder::default()
        .header("src/wrapper.h")
        .clang_arg(format!("-I{}/include", &*os_folder))
        .clang_arg("-Wno-everything")
        .generate_comments(false)
        .raw_line(
            "#![allow(non_upper_case_globals)]
                #![allow(non_camel_case_types)]
                #![allow(non_snake_case)]
                #![allow(improper_ctypes)]
                #![allow(dead_code)]
                #![allow(clippy::all)]",
        )
        .layout_tests(false)
        .parse_callbacks(Box::new(bindgen::CargoCallbacks))
        .generate()
        .expect("generate tongsuo openssl bindings failed");
    let mut out_path = PathBuf::from(env::var("CARGO_MANIFEST_DIR").unwrap());
    out_path = out_path.join("src/");
    let s = {
        let s = bindings.to_string();
        // remove "automatically generated by rust-bindgen" comment
        s.split("\n")
            .skip(2)
            .collect::<Vec<&str>>()
            .iter()
            .map(|&x| x.into())
            .collect::<Vec<String>>()
    };
    std::fs::write(out_path.join("bindings.rs"), s.join("\n")).expect("unable write bindings");
    // bindings
    //     .write_to_file()
    //     .expect("unable write bindings");
}

fn compile_tongsuo_openssl() {
    // https://wiki.openssl.org/index.php/Compilation_and_Installation#Configure_Options
    let debug = env::var("DEBUG").unwrap();
    Command::new("make")
        .current_dir(os_folder.clone())
        .arg("clean")
        .spawn()
        .expect("make clean")
        .wait()
        .unwrap();

    let mut cmd = Command::new("perl");
    cmd.current_dir(os_folder.clone())
        .arg("./Configure")
        .arg("-fPIC")
        .arg("shared")
        .env("CC", "clang");
    if debug == "true" {
        cmd.args([
            "no-asm",
            "-g3",
            "-O0",
            "-fno-omit-frame-pointer",
            "-fno-inline-functions",
        ]);
    } else {
        cmd.args(["-g0", "-03"]);
    }
    cmd.spawn().expect("configure").wait().unwrap();

    Command::new("make")
        .current_dir(os_folder.clone())
        .arg("-j")
        .spawn()
        .expect("make -j")
        .wait()
        .unwrap();
}

fn main() {
    // only build.rs can trigger rebuild
    // otherwise, cargo build will not build gm-openssl
    println!("cargo:rerun-if-changed=build.rs");
    compile_tongsuo_openssl();
    generate_openssl_bindings();
}
